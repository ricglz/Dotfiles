snippet "\b(de)?f" "def <name>..." r
def ${1:function_name}${2:(${3:*args})}
  $0
end
endsnippet

snippet cl "class .. (class)"
# $2
class $1
  $0
end
endsnippet

snippet inc
include $1
endsnippet

snippet hattr
${1:Model}.human_attribute_name(:${2:attr})${3:.capitalize}
endsnippet

snippet mname
${1:Model}.model_name.human${2:(count: 2)}${3:.capitalize}
endsnippet

snippet fori
(${1:from}..${2:to}).each
endsnippet

snippet ife
if $1
  $2
else
  $3
end
endsnippet

snippet do
do
  $1
end
endsnippet

snippet dop
do |${1:p}|
  $2
end
endsnippet

snippet "each_?s(lice)?" "<array>.each_slice(n) do |slice| <block> end" r
${1:elements}.each_slice(${2:2}) do |${3:slice}|
  $0
end
endsnippet

snippet clac "Create controller class"
class ${1:Model}Controller < $2Controller
  $0
end
endsnippet

snippet mod "Create module"
$2
module $1
  $0
end
endsnippet

snippet hum
${1:model_class}.human_attribute_name(:${2:attribute})${3:.capitalize}$4
endsnippet

snippet frozen
# frozen_string_literal: true
endsnippet

snippet adc
add_column :${1:model_table}, :${2:new_column}, :${3:integer}
endsnippet

snippet adi
add_column :$1, :$2, :$3
add_index :$1, :$2
endsnippet

snippet bt
belongs_to :$1${2:, -> { with_deleted }}, inverse_of: :$3
endsnippet

snippet hm
has_many :$1, inverse_of: :$2
endsnippet

snippet it
it '$1' do
  $2
end
endsnippet

snippet upda
$1.update_attribute :${2:name}, ${3:value}
endsnippet
