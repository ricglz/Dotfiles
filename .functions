# Create a folder and move into it in one command
function mkcd() { mkdir -p "$@" && cd "$_"; }

# Cd to git root
function cd_root() { cd $(git rev-parse --show-toplevel) }

# txt to md
function txt_to_md() {
  new_name=$(echo "$1" | cut -d '.' -f 1)
  mv $1 "$new_name.md"
}

# Change dates
function change_date() {
  files=(~/Downloads/photos/dated/*)
  i=0
  while read x; do
    time=$x"0000"
    touch -t $time $files[$i]
    i=$i+1
  done
}

# Create subjects for the semester
function create_subjects() {
  subjects=()
  ans="y"
  while [[ $ans =~ ^[Yy]$ ]]; do
    echo "Which subject do you want to add?"
    read new_subject
    subjects+=($new_subject)
    echo "Want to add another subject?"
    read ans
  done
  terms=(1_Parcial 2_Parcial Final)
  for subject in ${subjects[@]}; do
    mkcd $subject
    for term in ${terms[@]}; do
      mkdir $term
    done
    cd ..
  done
}

# General upgrade
function gupgr() { bupgr; nupgr }

# Update dotfiles
function upDotfiles() {
  last_path=$(pwd)
  cd ~/Dotfiles
  echo doing brew bundle
  brew bundle dump --force
  echo pusing to git
  git add .
  git commit -m "Update dotfiles"
  git push -u origin master
  cd $last_path
}

# Docker functions
function dcrdbm() { docker-compose run --rm ${1:-app} rails db:migrate }
function dcrdbr() { docker-compose run --rm ${1:-app} rails db:reset }
function dcrdbs() { docker-compose run --rm ${1:-app} rails db:setup }
function docker_pg_restore() {
  if [ $# -ne 3 ]; then
    echo "Error lacking arguments: docker_pg_restore #{container_id} #{database_name} #{dump_path}"
    return 1
  else
    docker exec -i "$1" pg_restore -U postgres -v -c -O -d "$2" < "$3"
  fi
}

# Pandoc function
function md_to_pdf() {
  new_name=$(echo "$1" | cut -d '.' -f 1)
  pandoc "$1" -o "$new_name.pdf" --template eisvogel --listings --pdf-engine=xelatex
}

function md_to_pdf_cited() {
  new_name=$(echo "$1" | cut -d '.' -f 1)
  pandoc "$1" -o "$new_name.pdf" --template eisvogel_apa --listings --pdf-engine=xelatex --filter pandoc-citeproc
}

function md_to_word() {
  new_name=$(echo "$1" | cut -d '.' -f 1)
  pandoc "$1" -o "$new_name.docx" --reference-doc="$HOME/.pandoc/templates/default.docx"
}

function md_to_pptx() {
  new_name=$(echo "$1" | cut -d '.' -f 1)
  pandoc "$1" -o "$new_name.pptx"
}

# youtube-dl functions
function add_music() {
  if [ ! -e "$HOME/Music/legal" ]; then
    mkdir "$HOME/Music/legal"
  fi
  cd $HOME/Music/legal
  youtube-dl $1 -x --download-archive archive.txt \
    --audio-format "mp3" \
    --add-metadata --embed-thumbnail \
    --metadata-from-title "([0-9]*\\. )?(?P<artist>.+?)(\\s*OST [0-9]*)?\\s*(-|\\|)\\s*(?P<title>.+)\\s*" \
    -o "%(title)s.%(ext)s"
  fd -E 'archive\.txt' -x open
  sleep 10
  fd -E 'archive\.txt' -x rm
  cd -
}
